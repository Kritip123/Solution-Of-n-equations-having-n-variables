import java.util.Scanner;

/**   Solving the LINEAR EQUATION having ANY number of variables  **/
public class Solve
{
   static int sum=0;


   /**   Finding DETERMINANT of the matrix (most important)   **/
   public static int det(int a[][],int n)
    {
        if(n==1)
        {
            return a[0][0];
        }
     if (n==2)
     {
         return(a[0][0]*a[1][1]-a[0][1]*a[1][0]);
           }

     else {
         sum=0;
         for (int i = 0; i < n; i++) {


             int copy[][] = new int[n - 1][n - 1];
         int x = 0, y = 0;
         for (int k = 1; k < n; k++)
         {
             y = 0;
             for (int j = 0; j < n; j++)
             {
                 if (j == i)
                     continue;
                 else
                     copy[x][y++] = a[k][j];
             }
             x++;
         }


         sum += (int)(Math.pow(-1,(i)))*a[0][i] * det(copy, n - 1);

         }
         return sum;
     }

    }



    /**   Multiplying the matrices   **/
    public static double[][] multiply(double a[][],int b[][],int n)
    {
        double c[][] = new double[n][1];
        double sum = 0;
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < 1; j++)
            {
                for (int k = 0; k < n; k++)
                {
                    sum += a[i][k] * b[k][j];
                }
                c[i][j] = sum;
                sum = 0;
            }
        }
        return c;
    }



        /**   Finding INVERSE without transposing the matrix   **/
        public static double[][] inverse(int a[][],int n)
        {
                double inv[][]=new double[n][n];
                int copy[][] = new int[n-1][n-1];
                int x=0,y=0;

                for (int i = 0; i < n; i++)
                {
                    for (int l = 0; l < n; l++)
                    {
                        y=0;
                         x = 0;
                        for (int k = 0; k < n; k++)
                        {
                            for (int j = 0; j < n; j++) {
                                if (k == i || j == l)
                                    continue;
                                else
                                {
                                    if(y==n-1)
                                    {
                                        y=0;
                                        x++;
                                    }

                                    copy[x][y++] = a[k][j];



                                }

                            }
                        }

                        inv[i][l]= ((Math.pow(-1,i+l))*det(copy,n-1))/det(a,n);
                    }
                }


             /**System.out.println("The Elements:-");
             for(int g=0;g<n;g++)
             {
             for(int h=0;h<n;h++)
             System.out.print(inv[g][h]+" ");
             System.out.println();
             }
              */

            return inv;
    }


    /**  Finding Transpose of the matrix   **/
    public static double[][] transpose(double a[][],int n)
    {
        double after_trans[][]=new double[n][n];

        for(int i = 0; i < n; i++)
        {
            for(int j = 0; j < n; j++) {
                after_trans[i][j] = a[j][i];
            }
        }

        return after_trans;

    }


    /**     Taking INPUT, displaying the EQUATIONS, calling INVERSE function, TRANSPOSING, MULTIPLYING, PRINTING the solutions  **/
    public static void main(String args[])
    {

        Scanner sc=new Scanner(System.in);
        System.out.println("Enter the number of Variables:-\n");
        int n=sc.nextInt();

        System.out.println("Enter the coefficients:-\n");
        int mat[][]=new int[n][n];
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            mat[i][j]=sc.nextInt();
        }

        System.out.println("Enter the constants:-\n");
        int mat2[][]=new int[n][1];
        for(int i=0;i<n;i++)
            mat2[i][0]=sc.nextInt();

        System.out.println("\fThe Equations are:-");
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<n;j++)
            {
                if (j == n - 1)
                    System.out.print(mat[i][j] + " y" + (j + 1) + " = " + mat2[i][0]);
                else
                    {
                    System.out.print(mat[i][j] + " y" + (j + 1) + " + ");
                }
            }
            System.out.println();
        }

        if(det(mat,n)==0)
        {
            System.out.println("\n\nSorry!!!!\nCan't find the solution(does not exist)!!\nPlease try with any other inputs!!!\nThank You.....");
            System.exit(0);
        }


        double inv[][]=inverse(mat,n);
        double inverse_real[][]=transpose(inv,n);
        double solution[][]=multiply(inverse_real,mat2,n);
        System.out.println("\nThe Solution of the Equations are:- ");
        for(int i=0;i<n;i++)


        System.out.println("y"+(i+1)+" = "+solution[i][0]);
        System.out.println("\n\nThank You!! \nHave a nice day!!!!!!!");
    }

}
